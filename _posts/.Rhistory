names <- sapply(getNodeSet(outsum[[1]], "//Item"), xmlGetAttr, name="Name") # gets names of values in summary
names
length_ <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Length")]) # gets seq lengths
gis <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Gi")]) # gets GI numbers
df <- data.frame(gis, length_) # makes data frame
df
gisuse <- df[which.max(x=df$length),"gis"] # picks longest sequnence length
gisuse
outsum[[1]]
length_ <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Title")]) # gets seq lengths # get spp names
length_ <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Length")]) # gets seq lengths
as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Title")]) # gets seq lengths # get spp names
sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Title")]
spnames <-  sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Title")] # gets seq lengths # get spp names
df <- data.frame(gis, length_, spnames) # makes data frame
gisuse <- df[which.max(x=df$length),c("gis","spnames")] # picks longest sequnence length
df
df <- data.frame(gis=gis, length=length_, spnames=spnames) # makes data frame
df
head(df)
head(df)
spnames
as.vector(spnames)
length(spnames)
laply(spnames)
laply(spnames, c)
df <- data.frame(gis=gis, length=length_, spnames=laply(spnames, c)) # makes data frame
df
df <- data.frame(gis=gis, length=length_, spnames=laply(spnames, c)) # makes data frame
gisuse <- df[which.max(x=df$length),c("gis","spnames")] # picks longest sequnence length
gisuse
gisuse[,1]
getseqs <- function(taxon_name, gene, getrelated)
{
# Workflow
message(paste("Working on ", taxon_name, "...", sep=""))
## Get GI numbers for a particular gene for a particular plant species
message("...retrieving sequence IDs...")
query <- list(db = "nuccore", term = paste(taxon_name, "[Organism]", gene, collapse=" "), RetMax=500)
out <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi",
query=query))$doc$children$eSearchResult
if( as.numeric(xmlValue(xpathApply(out, "//Count")[[1]]))==0 ){
message(paste("no sequences of ", gene, " for ", taxon_name, " - getting other sp.", sep=""))
if(getrelated == FALSE){
message(paste("no sequences of ", gene, " for ", taxon_name, sep=""))
outt <- list(taxon_name, NA, NA, NA)
} else
{
message("...retrieving sequence IDs for related species...")
newname <- strsplit(taxon_name, " ")[[1]][[1]]
query <- list(db = "nuccore", term = paste(newname, "[Organism]", gene, collapse=" "), RetMax=500)
out <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi",
query=query))$doc$children$eSearchResult
if( as.numeric(xmlValue(xpathApply(out, "//Count")[[1]]))==0 ){
message(paste("no sequences of ", gene, " for ", taxon_name, " or ", newname, sep=""))
outt <- list(taxon_name, NA, NA, NA)
} else
{
ids <- xpathApply(out, "//IdList//Id")
ids_ <- as.numeric(sapply(ids, xmlValue))
## For each species = get GI number with longest sequence
message("...retrieving sequence ID with longest sequence length...")
querysum <- list(db = "nucleotide", id = paste(ids_, collapse=" ")) # construct query for species
outsum <- parsed_content( # API call
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi",
query=querysum))$doc$children$eSummaryResult
names <- sapply(getNodeSet(outsum[[1]], "//Item"), xmlGetAttr, name="Name") # gets names of values in summary
length_ <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Length")]) # gets seq lengths
gis <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Gi")]) # gets GI numbers
spnames <- sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Title")] # gets seq lengths # get spp names
df <- data.frame(gis=gis, length=length_, spnames=laply(spnames, c)) # makes data frame
gisuse <- df[which.max(x=df$length),c("gis","spnames")] # picks longest sequnence length
## Get sequence from previous
message("...retrieving sequence...")
queryseq <- list(db = "sequences", id = gisuse[,1], rettype = "fasta", retmode = "text")
outseq <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi", query = queryseq))
seq <- str_replace_all(str_split(str_replace(outseq, "\n", "<<<"), "<<<")[[1]][[2]], "\n", "")
names(seq) <- taxon_name
outt <- list(taxon_name, gisuse[,2], gisuse[,1], seq)
}
}
} else
{
ids <- xpathApply(out, "//IdList//Id") # Get sequence IDs in list
ids_ <- as.numeric(sapply(ids, xmlValue))  # Get sequence ID values
## For each species = get GI number with longest sequence
message("...retrieving sequence ID with longest sequence length...")
querysum <- list(db = "nucleotide", id = paste(ids_, collapse=" ")) # construct query for species
outsum <- parsed_content( # API call
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi",
query=querysum))$doc$children$eSummaryResult
names <- sapply(getNodeSet(outsum[[1]], "//Item"), xmlGetAttr, name="Name") # gets names of values in summary
length_ <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Length")]) # gets seq lengths
gis <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Gi")]) # gets GI numbers
spnames <- sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Title")] # gets seq lengths # get spp names
df <- data.frame(gis=gis, length=length_, spnames=laply(spnames, c)) # makes data frame
gisuse <- df[which.max(x=df$length),c("gis","spnames")] # picks longest sequnence length
## Get sequence from previous
message("...retrieving sequence...")
queryseq <- list(db = "sequences", id = gisuse[,1], rettype = "fasta", retmode = "text")
outseq <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi", query = queryseq))
seq <- str_replace_all(str_split(str_replace(outseq, "\n", "<<<"), "<<<")[[1]][[2]], "\n", "")
outt <- list(taxon_name, gisuse[,2], gisuse[,1], seq)
}
message("...done.")
return( outt )
}
getseqs(taxon_name = as.character(mydat_2[[130]]), gene = "rbcl", getrelated=T)
getseqs <- function(taxon_name, gene, getrelated)
{
# Workflow
message(paste("Working on ", taxon_name, "...", sep=""))
## Get GI numbers for a particular gene for a particular plant species
message("...retrieving sequence IDs...")
query <- list(db = "nuccore", term = paste(taxon_name, "[Organism]", gene, collapse=" "), RetMax=500)
out <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi",
query=query))$doc$children$eSearchResult
if( as.numeric(xmlValue(xpathApply(out, "//Count")[[1]]))==0 ){
message(paste("no sequences of ", gene, " for ", taxon_name, " - getting other sp.", sep=""))
if(getrelated == FALSE){
message(paste("no sequences of ", gene, " for ", taxon_name, sep=""))
outt <- list(taxon_name, NA, NA, NA, NA)
} else
{
message("...retrieving sequence IDs for related species...")
newname <- strsplit(taxon_name, " ")[[1]][[1]]
query <- list(db = "nuccore", term = paste(newname, "[Organism]", gene, collapse=" "), RetMax=500)
out <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi",
query=query))$doc$children$eSearchResult
if( as.numeric(xmlValue(xpathApply(out, "//Count")[[1]]))==0 ){
message(paste("no sequences of ", gene, " for ", taxon_name, " or ", newname, sep=""))
outt <- list(taxon_name, NA, NA, NA, NA)
} else
{
ids <- xpathApply(out, "//IdList//Id")
ids_ <- as.numeric(sapply(ids, xmlValue))
## For each species = get GI number with longest sequence
message("...retrieving sequence ID with longest sequence length...")
querysum <- list(db = "nucleotide", id = paste(ids_, collapse=" ")) # construct query for species
outsum <- parsed_content( # API call
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi",
query=querysum))$doc$children$eSummaryResult
names <- sapply(getNodeSet(outsum[[1]], "//Item"), xmlGetAttr, name="Name") # gets names of values in summary
length_ <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Length")]) # gets seq lengths
gis <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Gi")]) # gets GI numbers
spnames <- sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Title")] # gets seq lengths # get spp names
df <- data.frame(gis=gis, length=length_, spnames=laply(spnames, c)) # makes data frame
gisuse <- df[which.max(x=df$length),] # picks longest sequnence length
## Get sequence from previous
message("...retrieving sequence...")
queryseq <- list(db = "sequences", id = gisuse[,1], rettype = "fasta", retmode = "text")
outseq <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi", query = queryseq))
seq <- str_replace_all(str_split(str_replace(outseq, "\n", "<<<"), "<<<")[[1]][[2]], "\n", "")
names(seq) <- taxon_name
outt <- list(taxon_name, gisuse[,3], gisuse[,1], gisuse[,2], seq)
}
}
} else
{
ids <- xpathApply(out, "//IdList//Id") # Get sequence IDs in list
ids_ <- as.numeric(sapply(ids, xmlValue))  # Get sequence ID values
## For each species = get GI number with longest sequence
message("...retrieving sequence ID with longest sequence length...")
querysum <- list(db = "nucleotide", id = paste(ids_, collapse=" ")) # construct query for species
outsum <- parsed_content( # API call
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi",
query=querysum))$doc$children$eSummaryResult
names <- sapply(getNodeSet(outsum[[1]], "//Item"), xmlGetAttr, name="Name") # gets names of values in summary
length_ <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Length")]) # gets seq lengths
gis <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Gi")]) # gets GI numbers
spnames <- sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Title")] # gets seq lengths # get spp names
df <- data.frame(gis=gis, length=length_, spnames=laply(spnames, c)) # makes data frame
gisuse <- df[which.max(x=df$length),] # picks longest sequnence length
## Get sequence from previous
message("...retrieving sequence...")
queryseq <- list(db = "sequences", id = gisuse[,1], rettype = "fasta", retmode = "text")
outseq <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi", query = queryseq))
seq <- str_replace_all(str_split(str_replace(outseq, "\n", "<<<"), "<<<")[[1]][[2]], "\n", "")
outt <- list(taxon_name, gisuse[,3], gisuse[,1], gisuse[,2], seq)
}
message("...done.")
return( outt )
}
getseqs(taxon_name = as.character(mydat_2[[130]]), gene = "rbcl", getrelated=T)
getseqs(taxon_name = as.character(mydat_2[[1]]), gene = "rbcl", getrelated=T)
query <- list(db = "nuccore", term = paste(newname, "[Organism]", gene, seqrange, "[SLEN]", collapse=" "), RetMax=500)
seqrange <- "1:2500"
seqrange
query <- list(db = "nuccore", term = paste(newname, "[Organism]", gene, seqrange, "[SLEN]", collapse=" "), RetMax=500)
query
out <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi",
query=query))$doc$children$eSearchResult
out
taxon_name <- as.character(mydat_2[[1]])
gene <- "rbcl"
seqrange <- "1:2500"
taxon_name
query <- list(db = "nuccore", term = paste(newname, "[Organism]", gene, seqrange, "[SLEN]", collapse=" "), RetMax=500)
query
query <- list(db = "nuccore", term = paste(taxon_name, "[Organism]", gene, seqrange, "[SLEN]", collapse=" "), RetMax=500)
query
out <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi",
query=query))$doc$children$eSearchResult
out
ids <- xpathApply(out, "//IdList//Id") # Get sequence IDs in list
ids_ <- as.numeric(sapply(ids, xmlValue))  # Get sequence ID values
## For each species = get GI number with longest sequence
message("...retrieving sequence ID with longest sequence length...")
querysum <- list(db = "nucleotide", id = paste(ids_, collapse=" ")) # construct query for species
outsum <- parsed_content( # API call
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi",
query=querysum))$doc$children$eSummaryResult
names <- sapply(getNodeSet(outsum[[1]], "//Item"), xmlGetAttr, name="Name") # gets names of values in summary
length_ <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Length")]) # gets seq lengths
gis <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Gi")]) # gets GI numbers
spnames <- sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Title")] # gets seq lengths # get spp names
df <- data.frame(gis=gis, length=length_, spnames=laply(spnames, c)) # makes data frame
gisuse <- df[which.max(x=df$length),] # picks longest sequnence length
gisuse
queryseq <- list(db = "sequences", id = gisuse[,1], rettype = "fasta", retmode = "text")
outseq <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi", query = queryseq))
seq <- str_replace_all(str_split(str_replace(outseq, "\n", "<<<"), "<<<")[[1]][[2]], "\n", "")
outt <- list(taxon_name, gisuse[,3], gisuse[,1], gisuse[,2], seq)
outt
getseqs <- function(taxon_name, gene, seqrange, getrelated)
{
# Workflow
message(paste("Working on ", taxon_name, "...", sep=""))
## Get GI numbers for a particular gene for a particular plant species
message("...retrieving sequence IDs...")
query <- list(db = "nuccore", term = paste(taxon_name, "[Organism]", gene, seqrange, "[SLEN]", collapse=" "), RetMax=500)
out <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi",
query=query))$doc$children$eSearchResult
if( as.numeric(xmlValue(xpathApply(out, "//Count")[[1]]))==0 ){
message(paste("no sequences of ", gene, " for ", taxon_name, " - getting other sp.", sep=""))
if(getrelated == FALSE){
message(paste("no sequences of ", gene, " for ", taxon_name, sep=""))
outt <- list(taxon_name, NA, NA, NA, NA)
} else
{
message("...retrieving sequence IDs for related species...")
newname <- strsplit(taxon_name, " ")[[1]][[1]]
query <- list(db = "nuccore", term = paste(newname, "[Organism]", gene, seqrange, "[SLEN]", collapse=" "), RetMax=500)
out <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi",
query=query))$doc$children$eSearchResult
if( as.numeric(xmlValue(xpathApply(out, "//Count")[[1]]))==0 ){
message(paste("no sequences of ", gene, " for ", taxon_name, " or ", newname, sep=""))
outt <- list(taxon_name, NA, NA, NA, NA)
} else
{
ids <- xpathApply(out, "//IdList//Id")
ids_ <- as.numeric(sapply(ids, xmlValue))
## For each species = get GI number with longest sequence
message("...retrieving sequence ID with longest sequence length...")
querysum <- list(db = "nucleotide", id = paste(ids_, collapse=" ")) # construct query for species
outsum <- parsed_content( # API call
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi",
query=querysum))$doc$children$eSummaryResult
names <- sapply(getNodeSet(outsum[[1]], "//Item"), xmlGetAttr, name="Name") # gets names of values in summary
length_ <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Length")]) # gets seq lengths
gis <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Gi")]) # gets GI numbers
spnames <- sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Title")] # gets seq lengths # get spp names
df <- data.frame(gis=gis, length=length_, spnames=laply(spnames, c)) # makes data frame
gisuse <- df[which.max(x=df$length),] # picks longest sequnence length
## Get sequence from previous
message("...retrieving sequence...")
queryseq <- list(db = "sequences", id = gisuse[,1], rettype = "fasta", retmode = "text")
outseq <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi", query = queryseq))
seq <- str_replace_all(str_split(str_replace(outseq, "\n", "<<<"), "<<<")[[1]][[2]], "\n", "")
names(seq) <- taxon_name
outt <- list(taxon_name, as.character(gisuse[,3]), gisuse[,1], gisuse[,2], seq)
}
}
} else
{
ids <- xpathApply(out, "//IdList//Id") # Get sequence IDs in list
ids_ <- as.numeric(sapply(ids, xmlValue))  # Get sequence ID values
## For each species = get GI number with longest sequence
message("...retrieving sequence ID with longest sequence length...")
querysum <- list(db = "nucleotide", id = paste(ids_, collapse=" ")) # construct query for species
outsum <- parsed_content( # API call
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi",
query=querysum))$doc$children$eSummaryResult
names <- sapply(getNodeSet(outsum[[1]], "//Item"), xmlGetAttr, name="Name") # gets names of values in summary
length_ <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Length")]) # gets seq lengths
gis <- as.numeric(sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Gi")]) # gets GI numbers
spnames <- sapply(getNodeSet(outsum, "//Item"), xmlValue)[str_detect(names, "Title")] # gets seq lengths # get spp names
df <- data.frame(gis=gis, length=length_, spnames=laply(spnames, c)) # makes data frame
gisuse <- df[which.max(x=df$length),] # picks longest sequnence length
## Get sequence from previous
message("...retrieving sequence...")
queryseq <- list(db = "sequences", id = gisuse[,1], rettype = "fasta", retmode = "text")
outseq <- parsed_content(
GET("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi", query = queryseq))
seq <- str_replace_all(str_split(str_replace(outseq, "\n", "<<<"), "<<<")[[1]][[2]], "\n", "")
outt <- list(taxon_name, as.character(gisuse[,3]), gisuse[,1], gisuse[,2], seq)
}
message("...done.")
return( outt )
}
getseqs(taxon_name = as.character(mydat_2[[1]]), gene = "rbcl", getrelated=T)
getseqs(taxon_name = as.character(mydat_2[[1]]), gene = "rbcl", seqrange = "1:2500", getrelated=T)
getseqs(taxon_name = as.character(mydat_2[[100]]), gene = "rbcl", seqrange = "1:2500", getrelated=T)
rbclseqs <- llply(mydat_2, getseqs, gene = "rbcl", seqrange = "1:2500", getrelated=T, .parallel=T)
length(rbclseqs)
warnings()
registerDoMC(cores=4)
sp <- as.data.frame(matrix(sample(c(rep(0, 50), rep(1, 20), rep(2,10), rep(3, 10))), 30, 30))
env <- as.data.frame(matrix(c(rnorm(30, 3, 5), rnorm(30, 5, 9), rnorm(30, 20, 10), rnorm(30, 50, 20)), 30, 4))
xy <- matrix(sample(rep(1:5, 6)), 30, 2)
sp
en
env
xy
sub.sample <- factor(c(rep("a", 10), rep("b", 10), rep("c", 10)))
sub.sample
library(vegan)
pcnm1 <- pcnm(dist(xy))$vectors
partition <- varpart(sp, ~., pcnm1, data=env)
plot(partition)
partition
sub.sample
xy
env
sp
pcnm1
env
install_github("rplos","ropensci")
require(rplos)
require(roxygen2)
roxygenize("/Users/ScottMac/github/ropensci/rplos")
install_github("rplos","ropensci")
require(rplos)
?searchplos
require(rplos)
install_github("cartodb-r", "Vizzuality")
install_github("CartoDB-r", "Vizzuality")
install_github("CartoDB", "Vizzuality")
install_github("CartoDB-r", "SChamberlain")
require(CartoDB)
help(package="CartoDB")
options()
cartodb.test()
cartodb.test
cartodb.sql.base()
cartodb("recology")
cartodb("recology", api.key="cd0f651b37733b08e6105c1ef560273928ac3725")
cartodb.test()
cartodb.collection("condma_1_cleaned", limit=10)
fields <- names(read.csv("/Mac/CANPOLIN/Data/Barcode_data/bold_download_04_23_12.txt")[1,])
fields <- readLines("/Mac/CANPOLIN/Data/Barcode_data/bold_download_04_23_12.txt", 1)
fields
fields2 <- strsplit(fields, "\\\")
)
fields2 <- strsplit(fields, "\")
fields2 <- strsplit(fields, "[\\\]")
fields2 <- strsplit(fields, "[\]")
fields2 <- strsplit(fields, "[\\]")
fields2
fields2 <- strsplit(fields, "[\\\]")
fields2 <- strsplit(fields, "[\t]")
fields2
fields2[[1]]
write.csv(fields2[[1]], "myfeilds.csv")
require(RMySQL)
require(RMySQL); require(plyr)
drv <- dbDriver("MySQL") # set the database to MySQL
drv
con <- dbConnect(drv, user = "root", dbname = "boldbarcode", host = "localhost") # set your credentials
con
g1 <- dbGetQuery(con, "SELECT nucleotides FROM barcodedat2 WHERE genus_name='Manduca'")
g1
dbListFields(con, "barcodedat2")
dbListFields(con, "barcodedat2") # table fields
con
q1 <- dbGetQuery(con, "SELECT nucleotides FROM barcodedat2 WHERE genus_name='Manduca,Gadus'")
q1
dat <- gdata::read.xls("/Mac/CANPOLIN/Data/Pollinator_traits/newfromsherri/beetraitstable_new_5July2012.xlsx")
require(RMySQL); require(plyr); require(gdata)
dat <- gdata::read.xls("/Mac/CANPOLIN/Data/Pollinator_traits/newfromsherri/beetraitstable_new_5July2012.xlsx")
dat <- gdata::read.xls("/Mac/CANPOLIN/Data/Pollinator_traits/newfromsherri/beetraitstable_new_5July2012.xlsx", sheet=1)
head(dat); str(dat)
spvec <- unique(dat$sciname)
length(spvec)
spvec[1]
spvec <- as.character(unique(dat$sciname))
length(spvec)
spvec[1]
spvec[1:5]
drv <- dbDriver("MySQL") # set the database to MySQL
con <- dbConnect(drv, user = "root", dbname = "boldbarcode", host = "localhost") # set your credentials
spvec[[1]]
paste("SELECT nucleotides FROM barcodedat2 WHERE genus_name='", spvec[1], "'", sep="")
query <- paste("SELECT nucleotides FROM barcodedat2 WHERE genus_name='", spvec[1], "'", sep="")
q1 <- dbGetQuery(con, query)
q1
q1 <- dbGetQuery(con, "SELECT nucleotides FROM barcodedat2 WHERE genus_name IN ('Manduca','Gadus')")
q1
paste(spvec[1:2], collapse='')
paste(spvec[1:2], collapse='/')
paste(spvec[1:2], collapse='\')
paste(spvec[1:2], collapse='\\')
paste(spvec[1:2], sep = "'", collapse="'")
paste0(spvec[1:2], sep = "'", collapse="'")
paste0(spvec[1:2], sep = "'", collapse="''")
paste0(spvec[1:2], sep = "'", collapse="'")
require(stringr)
thanks <- str_c(readLines(R.home("doc/THANKS")), collapse = "\n")
thanks <- word(thanks, 1, 3, fixed("\n\n"))
thanks
cat(str_wrap(thanks), "\n")
cat(str_wrap(thanks, width = 40), "\n")
dbGetQuery(con, "SELECT 1 FROM barcodedat2 WHERE genus_name='Manduca' LIMIT 1")
spvec
wrapstring <- function(x) {
paste("'", x, "'", sep="")
}
wrapstring(spvec[1])
sapply(spvec[1:5], wrapstring)
sapply(spvec[1:5], wrapstring, simplify=T)
sapply(spvec[1:5], wrapstring, USE.NAMES=T)
sapply(spvec[1:5], wrapstring, USE.NAMES=F)
paste(sapply(spvec[1:5], wrapstring, USE.NAMES=F), ",")
paste(sapply(spvec[1:5], wrapstring, USE.NAMES=F), sep=",")
paste(sapply(spvec[1:5], wrapstring, USE.NAMES=F), collapse=",")
wrapstring <- function(x) { paste("'", x, "'", sep="") }
wrapstring <- function(x) { paste("'", x, "'", sep="") }
spvec_ <- paste(sapply(spvec, wrapstring, USE.NAMES=F), collapse=",")
spvec_
dbListFields(con, "barcodedat2") # table fields
drv <- dbDriver("MySQL") # set the database to MySQL
con <- dbConnect(drv, user = "root", dbname = "boldbarcode", host = "localhost") # set your credentials
dbListFields(con, "barcodedat2") # table fields
wrapstring <- function(x) { paste("'", x, "'", sep="") }
spvec_ <- paste(sapply(spvec, wrapstring, USE.NAMES=F), collapse=",")
query <- paste("SELECT nucleotides FROM barcodedat2 WHERE genus_name IN (", spvec, ")", sep="")
q1 <- dbGetQuery(con, query)
query
query <- paste("SELECT nucleotides FROM barcodedat2 WHERE genus_name IN (", spvec, ")", collapse="")
query
query <- paste("SELECT nucleotides FROM barcodedat2 WHERE genus_name IN (", spvec_, ")", collapse="")
query
query <- paste("SELECT nucleotides FROM barcodedat2 WHERE genus_name IN (", spvec_, ")", collapse="")
q1 <- dbGetQuery(con, query)
str(q1)
query <- paste("SELECT genus_name, nucleotides FROM barcodedat2 WHERE genus_name IN (", spvec_, ")", collapse="")
query
KnitPost <- function(input, base.url = "/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("img/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_posts")
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
setwd("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_posts")
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
KnitPost <- function(input, base.url = "/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("img/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("/path/to/_posts")
KnitPost("/path/to/postfile.Rmd")
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
install.packages("highlight")
require(highlight)
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
KnitPost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
require(roxygen2)
roxygenize("/Users/ScottMac/github/SChamberlain/sacbox")
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
knitpost <- function(input, base.url = "/")
{
opts_knit$set(base.url = base.url)
fig.path <- paste0("img/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-01-20-global-names-resolver.Rmd")
setwd("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_posts")
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-07-20-global-names-resolver.Rmd")
